# Basic Vector type (struct) #
Vector<T> = { size: i32, items: T* };

# Method implementation for a type (similar to rust's impl) #
Vector<T>.push = (v: Vector<T>, i: T): void -> {
  if(v.size == 0, () -> {
    v.items = malloc(sizeof(T));
    v.items[v.size++] = i;
  }, () -> {
    v.items = realloc(v.items, ++v.size * sizeof(T));
    v.items[v.size - 1] = i;
  });
};

# Operator overloading #
Vector<T>[] = (v, i: i32): T -> {
  return(v.items[i]);
};
Vector<T> + Vector<T> = (a, b): Vector<T> -> {
  i = 0;
  while(() -> { return(i < b.size); }, () -> {
    a.push(b[i]); # b[i] calls Vector<T>[] #
  });
  return(a);
};

# Function overloading #
# A typename can also be used as a function name
  This would be useful for creating constructors for types #
Vector<T> = (): Vector<T> -> {
  return({ 0, NULL });
};
Vector<T> = (size: i32): Vector<T> -> {
  return({ size, malloc(size * sizeof(T)) });
};

# Restrict the types that a function can take #
createNode<T = FunctionNode | BinopNode | NumberNode | IdentifierNode> = () -> {
  # ... #
};

# Enums (same syntax as struct but without type declarations) #
NodeType = { FUNCTION, VARIABLE, BINOP };
# Access these elements by e.g. NodeType.FUNCTION
  NodeType is also a type so (type: NodeType) -> { ... } is possible #

# Type aliasing #
String = i8*;

main = (argc: i32, argv: String*): u8 -> {
  # Type notation can be left out if it can be inferred #
  list = Vector<String>();
  # Would be equal to list: Vector<String> = Vector<String>(); #

  while(() -> { return(argc > 0); }, () -> {
    # You don't need to pass the list as the first argument of the push function
      roblang does it for you when you use the method call syntax (using .) #
    list.push(argv[argc]);
    argc--;
  });

  return(0);
};